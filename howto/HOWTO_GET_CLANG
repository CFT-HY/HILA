Clang / llvm development tools are needed for compiling hila-preprocessor 'hilapp'

--------------------------

1. The best option is to use linux distribution packages (to be tested on a Mac!).
Major distributions include llvm and clang packages needed for hilapp. 
For example, in Ubuntu 20.04 the following seems to work:

> apt install clang-11 llvm-11 clang-tools-11 libclang-common-11-dev libclang-cpp11-dev libclang-11-dev clang-format-11

--------------------------

2. Binary apt/rpm -distribution from llvm.org

See page https://apt.llvm.org/ for the correct apt/yum commands for debian/ubuntu and rpms.

* add deb to sources (this for ubuntu 20.04 focal).  Change -12 to the desired llvm/clang version.
sudo add-apt-repository 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-12 main'

* with key
wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -

* install (again, change 12 to suit!)
sudo apt update
sudo apt install clang-12 clang-tools-12 clang-12-doc libclang-common-12-dev libclang-12-dev libclang1-12 clang-format-12

* Clang 10 or above is required.

---------------------------

3. Source distribution and compiling

For download and compilation, see page
  https://clang.llvm.org/get_started.html
for instructions.  Any modern gcc or clang should be sufficient for building.
Python and cmake are also needed.

In summary:

* Download with
git clone https://github.com/llvm/llvm-project.git

* Compile:

cd llvm-project
mkdir build
cd build
cmake -G "Unix Makefiles" -DLLVM_ENABLE_PROJECTS=clang -DCMAKE_BUILD_TYPE=Release ../llvm
make -j4

* This leaves binaries in llvm-project/build/bin -directory. 
* Build types are Release, MinSizeRel, Debug, RelWithDebInfo


