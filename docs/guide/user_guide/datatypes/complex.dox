/**
@page complex Complex\<S\>

User guide for custom HILA Complex class

The Complex class is a general representation of a Complex number where the real and imaginary components are store in `Complex::re` and `Complex::im`.

# Construction, Assignment and Access

> __NOTE__: Construction and assignment is possible only when the assignable values type is compatible with the type S of the Complex\<S\> variable.

The multiple ways of constructing, assigning and accessing a Complex object can be viewed on the Object documentation page

- `Complex::Complex()`
- `Complex::operator=`
- `Complex::real()` and `Complex::imag()`

A simple example of constructing a Complex object is as follows:

\code {.cpp}
Complex<MyType> C(1,1); // Constructor which assigns both (real,imaginary) values
Complex<MyType> B;      // Constructor by default assigns to both (real=0,imaginary=0)
B = C;                  // Complex Assignment copies both real and imaginary values
B = 1;                  // Scalar assignment will assign only the real component
\endcode

Accessing the real and complex components of a Complex type can be done by either accessing the components directly

~~~cpp
hila::out0 << C.re << " " << C.im;
~~~

or by using the std like accessors

~~~cpp
hila::out0 << C.real() << " " << C.imag();
~~~

# Mathematical methods

The arithmetic methods and arithmetic assignment methods hold allot of overloads depending on specific objects they are called for. All cases are documented and should be listed in order on the class page. These can be seen by following the links below.

## Standard arithmetic methods

The following standard arithmetic methods are defined in the usual way for Complex numbers.

- `Complex::operator+`
- `Complex::operator-`
- `Complex::operator*`
- `Complex::operator/`

## Arithmetic assignment methods

- `Field::operator+=`
- `Field::operator-=`
- `Field::operator*=`
- `Field::operator/=`

## Arithmetic increment operators

- `Complex::operator++`
- `Complex::operator--`

## Comparison operators

- `Complex::operator==`
- `Complex::operator!=`

## Mathematical functions

- `Complex::abs`
- `Complex::arg`
- `Complex::conj`
- `Complex::dagger`
- `Complex::polar`
- `Complex::squarenorm`
- `Complex::acos`
- `Complex::acosh`
- `Complex::asin`
- `Complex::asinh`
- `Complex::atan`
- `Complex::atanh`
- `Complex::cbrt`
- `Complex::cos`
- `Complex::cosh`
- `Complex::exp`
- `Complex::expi`
- `Complex::log`
- `Complex::pow`
- `Complex::sin`
- `Complex::sinh`
- `Complex::sqrt`
- `Complex::tan`
- `Complex::tanh`

## Random number generators

There are two random number generators available for the Complex type.

- `Complex::random`
- `Complex::gaussian_random`

__Uniform distribution:__

~~~cpp
Complex<S> c.random();
~~~

__Gaussian distribution:__

~~~cpp
Complex<S> c.gaussian_random();
~~~

More detailed description on the functionality for both functions can be read on the Class page.

 */
