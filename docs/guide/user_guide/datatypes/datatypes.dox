/**
\page datatypes Datatypes

List of datatypes offered by HILA

# Standard types \<S\>: {#standard}

- `int`
- `int64_t`
- `float`
- `double`
- (`long double`?)

# Basic types: {#basic}

- \subpage complex
- Matrix\<n,m,T\>
    - #Vector\<n,T\>
    - #RowVector\<n,T\>
    - #SquareMatrix\<n,T\>
    - SU\<n,T>
- Array\<n,m,T\>

Here n,m\f$ \in \mathbb{N}\f$, S is any standard type, and T includes S and Complex\<S\>.  C++ or C standard complex types should not be used (not AVX vectorizable). Many of the methods defined for the Basic types are commonly defined for multiple basic types. Thus for organizational purposes we will list all of the commonly found methods and which type they are defined for. Class specific functionality will be described on the Basic types respective page listed above.

> __NOTE__: Matrix is defined with the base class Matrix_t (See documentation for details). #Vector, #RowVector and #SquareMatrix are special alias cases of Matrix Class and SU is a special case of Matrix_t, thus most methods are inherited. For this reason most methods and operators will link to the same definition defined for Matrix. For example since `operator+` is defined similarly for all Matrix cases they all link to the same definition.

## Standard arithmetic methods:
| Operation | Type|
|:---------:|:--------|
|`operator+`| `Complex::operator+` \n `Matrix::operator+` \n `Vector::operator+` \n `RowVector::operator+` \n `SquareMatrix::operator+` \n `SU::operator+` |
|`operator-`| `Complex::operator-` \n `Matrix::operator-` \n `Vector::operator-` \n `RowVector::operator-` \n `SquareMatrix::operator-` \n `SU::operator-` |
|`operator*`| `Complex::operator*` \n `Matrix::operator*` \n `Vector::operator*` \n `RowVector::operator*` \n `SquareMatrix::operator*` \n `SU::operator*` |
|`operator/`| `Complex::operator/` \n `Matrix::operator/` \n `Vector::operator/` \n `RowVector::operator/` \n `SquareMatrix::operator/` \n `SU::operator/` |

## Arithmetic assignment methods:

| Operation | Type |
|:---------:|:--------|
|`operator+=`| `Complex::operator+=` \n `Matrix::operator+=` \n `Vector::operator+=` \n `RowVector::operator+=` \n `SquareMatrix::operator+=` \n `SU::operator+=` |
|`operator-=`| `Complex::operator-=` \n `Matrix::operator-=` \n `Vector::operator-=` \n `RowVector::operator-=` \n `SquareMatrix::operator-=` \n `SU::operator-=` |
|`operator*=`| `Complex::operator*=` \n `Matrix::operator*=` \n `Vector::operator*=` \n `RowVector::operator*=` \n `SquareMatrix::operator*=` \n `SU::operator*=` |
|`operator/=`| `Complex::operator/=` \n `Matrix::operator/=` \n `Vector::operator/=` \n `RowVector::operator/=` \n `SquareMatrix::operator/=` \n `SU::operator/=` |

# Special types

::Parity :

enum with values EVEN, ODD, ALL; refers to parity of the site. Parity of site (x,y,z,t) is even if
`(x+y+z+t)` is even, odd otherwise.

::Direction:

Conceptually a unit vector with values `±e_x, ±e_y, ±e_z, ±e_t`  (if NDIM==4). Implemented as an
enum class.  Can be used to index arrays of size NDIM.

#CoordinateVector:

Acts as a Coordinate Vector for indexing Field. All Vector algebra is well defined, since
CoordinateVector inherits from #Vector which inherits from Matrix

> __NOTE__: See CoordinateVector_t

### Example of CoordinateVector and Direction usage:

Defining a CoordinateVector and Direction:

~~~cpp
CoordinateVector v
Direction d = e_x
~~~

Direction objects act as unit vectors when cast to CoordinateVector.
Additionally algebra acts as defined according to vector algebra:

~~~cpp
v = d;             // v = [1,0,0,0]
v += e_y - 3*d;    // v = [-2,1,0,0]
~~~

CoordinateVectors can be assigned with initializer list, where indices of list are aligned with
CoordinateVector dimensions. Unit vector form with Direction's is also given:

~~~cpp
v = {0,1,-1,0};    // v = [0,1,-1,0]
v = e_y - e_z;     // equivalent to {0,1,-1,0}
~~~

Simple operations like a dot product are defined:

~~~cpp
int i = v.dot({1,2,3,4});  // dot product of 2 vectors, evaluates to -1
~~~

Since Direction is an enum it can be casted to int, but int cannot be assigned to it
~~~cpp
int j = d;         // ok
d = j;             // ERROR: cannot assign int to Direction
~~~

The ++d operator is also defined for Direction where it increase the direction in order \f$
\{e_x,e_y,e_z,e_t\} \f$. While --d operator is not defined

~~~cpp
++d;               // e_x -> e_y
is_up_dir(d);      // true if d is along positive x,y,z,t-dir.
~~~

These are only some of the examples of what the CoordinateVector and Direction objects are capable
of. For all definitions see coordinates.h, CoordinateVector and Direction pages.
*/