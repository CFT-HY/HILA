/**
@page matrix Matrix\<n,m,T\>

User guide for custom HILA Matrix class

> __NOTE__: n,m are integers and T is a HILA [standard type](@ref standard) or Complex.

Matrix is defined with the base class Matrix_t (See documentation for details). #Vector, #RowVector and #SquareMatrix are special alias cases of Matrix Class additionally SU and DiagonalMatrix are special cases of Matrix_t. Thus most methods for the aliases and special cases are inherited from Matrix.

- #Vector\<n,T\>
- #RowVector\<n,T\>
- #SquareMatrix\<n,T\>

The special alias cases have some functions specific to them which are documented on this page while SU and DiagonalMatrix have their own dedicated pages.

# Construction

> __NOTE__: Construction is possible only when the assignable values type or it's element type is compatible with the type T of the Matrix\<T\> variable.

__Default constructor__:

Allocates undefined \f$ n\times m\f$ Array.

\code{.cpp}
Matrix<n,m,T> M;
\endcode

__Scalar constructor__:

Construct with given scalar at diagonal elements \f$ M = \mathbf{I}\cdot x\f$. Only defined for square matrices.

\code{.cpp}
T x = hila::random();
Matrix<n,m,T> M = x;
\endcode

__Copy constructor__:

Construction from previously defined matrix if types are compatible. For example the code
below only works if assignment from MyOtherType to T is defined.

\code{.cpp}
Matrix<n,m,MyOtherType> M_0;
//
// M_0 is filled with content
//
Matrix<n,m,T> M = M_0;
\endcode

__Initializer list__:

Construction from c++ initializer list.

\code{.cpp}
Matrix<2,2,int> M = {1, 0
                     0, 1};
\endcode

# Assignment

## Standard assignment

> __NOTE__: Assignment is possible only when the assignable values type or it's element type is compatible with the type T of the Matrix\<T\> variable.

__Assignment from Matrix__:

\code {.cpp}
Matrix<n,m,T> M_0;
.
. M_0 has values assigned to it
.
Matrix<n,m,T> M; \\ undefined matrix
M = M_0; \\ Assignment from M_0
\endcode

__Assignment from 0__:

\code {.cpp}
Matrix<n,m,T> M;
M = 0; Zero matrix;
\endcode

__Assignment from scalar__:

Assignment from scalar assigns the scalar to the diagonal elements as \f$ M = I\cdot a\f$

\code {.cpp}
T a = hila::random;
Matrix<n,m,T> M;
M = a; M = I*a
\endcode

__Assignment from initializer list__:

Assignment from c++ initializer list.

\code{.cpp}
Matrix<2,2,int> M ;
M = {1, 0
0, 1};
\endcode

## Set elements

- `Matrix::set_row`
- `Matrix::set_column`
- `Matrix::set_diagonal`

# Access

__Array indexing operation for matrices and vectors with Matrix::e__

Accessing singular elements is insufficient, but matrix elements are often quite
small.

Exammple for matrix:
\code
    Matrix<n,m,T> M;
    T a = M.e(i,j); \\ i <= n, j <= m
\endcode

Example for vector:
\code {.cpp}
    Vector<n,T> V;
    T a = V.e(i) \\ i <= n
\endcode

__Standard array indexing operation for vectors only with Matrix::operator[]__

\code {.cpp}
    Vector<n,T> V;
    T a = V[i] \\ i <= n
\endcode

__Access row, column or diagonal elemetns__

- `Matrix::row`
- `Matrix::column`
- `Matrix::diagonal`

# Mathematical methods

The arithmetic methods and arithmetic assignment methods hold allot of overloads depending on specific objects they are called for. All cases are documented and should be listed in order on the class page. These can be seen by following the links below.

## Standard arithmetic methods

The following standard arithmetic methods are defined in the usual way for Matrices numbers.

- `Matrix::operator+`
- `Matrix::operator-`
- `Matrix::operator*`
- `Matrix::operator/`

## Arithmetic assignment methods

- `Matrix::operator+=`
- `Matrix::operator-=`
- `Matrix::operator*=`
- `Matrix::operator/=`

## Mathematical functions

- `Matrix::abs`
- `Matrix::adjoint`
- `Matrix::conj`
- `Matrix::dagger`
- `Matrix::det`
- `Matrix::det_laplace`
- `Matrix::det_lu`
- `Vector::dot`
- `Matrix::eigen_hermitean`
- `Matrix::exp`
- `Matrix::imag`
- `Matrix::mul_trace`
- `Matrix::mult_by_2x2_left`
- `Matrix::mult_by_2x2_right`
- `Matrix::norm`
- `Matrix::real`
- `Matrix::squarenorm`
- `Matrix::svd`
- `Matrix::svd_pivot`
- `Matrix::trace`
- `Matrix::transpose`

## Random number generators

There are two random number generators available for the Matrix type.

- `Matrix::random`
- `Matrix::gaussian_random`

More detailed description on the functionality for both functions can be read on the Class page.

 */
